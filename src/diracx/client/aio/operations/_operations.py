# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.5, generator: @autorest/python@6.4.11)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ...operations._operations import (
    build_auth_authorization_flow_complete_request,
    build_auth_authorization_flow_request,
    build_auth_do_device_flow_request,
    build_auth_finish_device_flow_request,
    build_auth_finished_request,
    build_auth_initiate_device_flow_request,
    build_config_serve_config_request,
    build_jobs_delete_bulk_jobs_request,
    build_jobs_delete_single_job_request,
    build_jobs_get_bulk_job_status_request,
    build_jobs_get_single_job_request,
    build_jobs_get_single_job_status_request,
    build_jobs_kill_bulk_jobs_request,
    build_jobs_kill_single_job_request,
    build_jobs_search_request,
    build_jobs_set_single_job_status_request,
    build_jobs_set_status_bulk_request,
    build_jobs_submit_bulk_jobs_request,
    build_jobs_summary_request,
    build_well_known_openid_configuration_request,
)
from .._vendor import raise_if_not_implemented

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
T = TypeVar("T")
ClsType = Optional[
    Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]
]
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class AuthOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~client.aio.Dirac`'s
        :attr:`auth` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = (
            input_args.pop(0) if input_args else kwargs.pop("deserializer")
        )
        raise_if_not_implemented(
            self.__class__,
            [
                "token",
            ],
        )

    @distributed_trace_async
    async def do_device_flow(
        self, vo: str, *, user_code: str, **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Do Device Flow.

        This is called as the verification URI for the device flow.
        It will redirect to the actual OpenID server (IAM, CheckIn) to
        perform a authorization code flow.

        We set the user_code obtained from the device flow in a cookie
        to be able to map the authorization flow with the corresponding
        device flow.
        (note: it can't be put as parameter or in the URL).

        :param vo: Required.
        :type vo: str
        :keyword user_code: Required.
        :paramtype user_code: str
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_auth_do_device_flow_request(
            vo=vo,
            user_code=user_code,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def initiate_device_flow(
        self, vo: str, *, client_id: str, scope: str, audience: str, **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Initiate Device Flow.

        Initiate the device flow against DIRAC authorization Server.
        Scope must have exactly up to one ``group`` (otherwise default) and
        one or more ``property`` scope.
        If no property, then get default one

        Offers the user to go with the browser to
        ``auth/<vo>/device?user_code=XYZ``.

        :param vo: Required.
        :type vo: str
        :keyword client_id: Required.
        :paramtype client_id: str
        :keyword scope: Required.
        :paramtype scope: str
        :keyword audience: Required.
        :paramtype audience: str
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_auth_initiate_device_flow_request(
            vo=vo,
            client_id=client_id,
            scope=scope,
            audience=audience,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def finish_device_flow(
        self, vo: str, *, code: str, state: str, **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Finish Device Flow.

        This the url callbacked by IAM/Checkin after the authorization
        flow was granted.
        It gets us the code we need for the authorization flow, and we
        can map it to the corresponding device flow using the user_code
        in the cookie/session.

        :param vo: Required.
        :type vo: str
        :keyword code: Required.
        :paramtype code: str
        :keyword state: Required.
        :paramtype state: str
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_auth_finish_device_flow_request(
            vo=vo,
            code=code,
            state=state,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def finished(
        self, vo: str, **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Finished.

        Finished.

        :param vo: Required.
        :type vo: str
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_auth_finished_request(
            vo=vo,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def authorization_flow(
        self,
        vo: str,
        *,
        response_type: Union[str, _models.Enum2],
        code_challenge: str,
        code_challenge_method: Union[str, _models.Enum3],
        client_id: str,
        redirect_uri: str,
        scope: str,
        state: str,
        **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Authorization Flow.

        Authorization Flow.

        :param vo: Required.
        :type vo: str
        :keyword response_type: "code" Required.
        :paramtype response_type: str or ~client.models.Enum2
        :keyword code_challenge: Required.
        :paramtype code_challenge: str
        :keyword code_challenge_method: "S256" Required.
        :paramtype code_challenge_method: str or ~client.models.Enum3
        :keyword client_id: Required.
        :paramtype client_id: str
        :keyword redirect_uri: Required.
        :paramtype redirect_uri: str
        :keyword scope: Required.
        :paramtype scope: str
        :keyword state: Required.
        :paramtype state: str
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_auth_authorization_flow_request(
            vo=vo,
            response_type=response_type,
            code_challenge=code_challenge,
            code_challenge_method=code_challenge_method,
            client_id=client_id,
            redirect_uri=redirect_uri,
            scope=scope,
            state=state,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def authorization_flow_complete(
        self, vo: str, *, code: str, state: str, **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Authorization Flow Complete.

        Authorization Flow Complete.

        :param vo: Required.
        :type vo: str
        :keyword code: Required.
        :paramtype code: str
        :keyword state: Required.
        :paramtype state: str
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_auth_authorization_flow_complete_request(
            vo=vo,
            code=code,
            state=state,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class JobsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~client.aio.Dirac`'s
        :attr:`jobs` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = (
            input_args.pop(0) if input_args else kwargs.pop("deserializer")
        )

    @overload
    async def search(
        self,
        body: Optional[_models.JobSearchParams] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[List[JSON], _models.HTTPValidationError]:
        """Search.

        Search.

        :param body: Default value is None.
        :type body: ~client.models.JobSearchParams
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JSON or HTTPValidationError
        :rtype: list[JSON] or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def search(
        self,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[List[JSON], _models.HTTPValidationError]:
        """Search.

        Search.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JSON or HTTPValidationError
        :rtype: list[JSON] or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def search(
        self, body: Optional[Union[_models.JobSearchParams, IO]] = None, **kwargs: Any
    ) -> Union[List[JSON], _models.HTTPValidationError]:
        """Search.

        Search.

        :param body: Is either a JobSearchParams type or a IO type. Default value is None.
        :type body: ~client.models.JobSearchParams or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: list of JSON or HTTPValidationError
        :rtype: list[JSON] or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[List[JSON], _models.HTTPValidationError]] = kwargs.pop(
            "cls", None
        )

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "JobSearchParams")
            else:
                _json = None

        request = build_jobs_search_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("[object]", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def summary(
        self,
        body: _models.JobSummaryParams,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Summary.

        Show information suitable for plotting.

        :param body: Required.
        :type body: ~client.models.JobSummaryParams
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def summary(
        self, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Summary.

        Show information suitable for plotting.

        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def summary(
        self, body: Union[_models.JobSummaryParams, IO], **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Summary.

        Show information suitable for plotting.

        :param body: Is either a JobSummaryParams type or a IO type. Required.
        :type body: ~client.models.JobSummaryParams or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "JobSummaryParams")

        request = build_jobs_summary_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_single_job(
        self, job_id: int, **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Get Single Job.

        Get Single Job.

        :param job_id: Required.
        :type job_id: int
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_jobs_get_single_job_request(
            job_id=job_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete_single_job(
        self, job_id: int, **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Delete Single Job.

        Delete Single Job.

        :param job_id: Required.
        :type job_id: int
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_jobs_delete_single_job_request(
            job_id=job_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def kill_single_job(
        self, job_id: int, **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Kill Single Job.

        Kill Single Job.

        :param job_id: Required.
        :type job_id: int
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_jobs_kill_single_job_request(
            job_id=job_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_single_job_status(
        self, job_id: int, **kwargs: Any
    ) -> Union[Union[str, _models.JobStatus], _models.HTTPValidationError]:
        """Get Single Job Status.

        Get Single Job Status.

        :param job_id: Required.
        :type job_id: int
        :return: JobStatus or HTTPValidationError
        :rtype: str or ~client.models.JobStatus or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[
            Union[Union[str, _models.JobStatus], _models.HTTPValidationError]
        ] = kwargs.pop("cls", None)

        request = build_jobs_get_single_job_status_request(
            job_id=job_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("str", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def set_single_job_status(
        self, job_id: int, *, status: Union[str, _models.JobStatus], **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Set Single Job Status.

        Set Single Job Status.

        :param job_id: Required.
        :type job_id: int
        :keyword status: Known values are: "Running", "Stalled", "Killed", "Failed", "RECEIVED", and
         "Submitting". Required.
        :paramtype status: str or ~client.models.JobStatus
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_jobs_set_single_job_status_request(
            job_id=job_id,
            status=status,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def submit_bulk_jobs(
        self, body: List[str], *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Submit Bulk Jobs.

        Submit Bulk Jobs.

        :param body: Required.
        :type body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def submit_bulk_jobs(
        self, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Submit Bulk Jobs.

        Submit Bulk Jobs.

        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def submit_bulk_jobs(
        self, body: Union[List[str], IO], **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Submit Bulk Jobs.

        Submit Bulk Jobs.

        :param body: Is either a [str] type or a IO type. Required.
        :type body: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "[str]")

        request = build_jobs_submit_bulk_jobs_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete_bulk_jobs(
        self, *, job_ids: List[int], **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Delete Bulk Jobs.

        Delete Bulk Jobs.

        :keyword job_ids: Required.
        :paramtype job_ids: list[int]
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_jobs_delete_bulk_jobs_request(
            job_ids=job_ids,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def kill_bulk_jobs(
        self, *, job_ids: List[int], **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Kill Bulk Jobs.

        Kill Bulk Jobs.

        :keyword job_ids: Required.
        :paramtype job_ids: list[int]
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_jobs_kill_bulk_jobs_request(
            job_ids=job_ids,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_bulk_job_status(
        self, *, job_ids: List[int], **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Get Bulk Job Status.

        Get Bulk Job Status.

        :keyword job_ids: Required.
        :paramtype job_ids: list[int]
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_jobs_get_bulk_job_status_request(
            job_ids=job_ids,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def set_status_bulk(
        self,
        body: List[_models.JobStatusUpdate],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[List[_models.JobStatusReturn], _models.HTTPValidationError]:
        """Set Status Bulk.

        Set Status Bulk.

        :param body: Required.
        :type body: list[~client.models.JobStatusUpdate]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JobStatusReturn or HTTPValidationError
        :rtype: list[~client.models.JobStatusReturn] or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def set_status_bulk(
        self, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[List[_models.JobStatusReturn], _models.HTTPValidationError]:
        """Set Status Bulk.

        Set Status Bulk.

        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JobStatusReturn or HTTPValidationError
        :rtype: list[~client.models.JobStatusReturn] or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def set_status_bulk(
        self, body: Union[List[_models.JobStatusUpdate], IO], **kwargs: Any
    ) -> Union[List[_models.JobStatusReturn], _models.HTTPValidationError]:
        """Set Status Bulk.

        Set Status Bulk.

        :param body: Is either a [JobStatusUpdate] type or a IO type. Required.
        :type body: list[~client.models.JobStatusUpdate] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: list of JobStatusReturn or HTTPValidationError
        :rtype: list[~client.models.JobStatusReturn] or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[
            Union[List[_models.JobStatusReturn], _models.HTTPValidationError]
        ] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "[JobStatusUpdate]")

        request = build_jobs_set_status_bulk_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("[JobStatusReturn]", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class ConfigOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~client.aio.Dirac`'s
        :attr:`config` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = (
            input_args.pop(0) if input_args else kwargs.pop("deserializer")
        )

    @distributed_trace_async
    async def serve_config(
        self,
        vo: str,
        *,
        if_none_match: Optional[str] = None,
        if_modified_since: Optional[str] = None,
        **kwargs: Any
    ) -> Union[Any, _models.HTTPValidationError]:
        """Serve Config.

        "
        Get the latest view of the config.

        If If-None-Match header is given and matches the latest ETag, return 304

        If If-Modified-Since is given and is newer than latest,
            return 304: this is to avoid flip/flopping.

        :param vo: Required.
        :type vo: str
        :keyword if_none_match: Default value is None.
        :paramtype if_none_match: str
        :keyword if_modified_since: Default value is None.
        :paramtype if_modified_since: str
        :return: any or HTTPValidationError
        :rtype: any or ~client.models.HTTPValidationError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[Any, _models.HTTPValidationError]] = kwargs.pop("cls", None)

        request = build_config_serve_config_request(
            vo=vo,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 422]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("object", pipeline_response)

        if response.status_code == 422:
            deserialized = self._deserialize("HTTPValidationError", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class WellKnownOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~client.aio.Dirac`'s
        :attr:`well_known` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = (
            input_args.pop(0) if input_args else kwargs.pop("deserializer")
        )

    @distributed_trace_async
    async def openid_configuration(self, **kwargs: Any) -> Any:
        """Openid Configuration.

        Openid Configuration.

        :return: any
        :rtype: any
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Any] = kwargs.pop("cls", None)

        request = build_well_known_openid_configuration_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("object", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
